{"version":3,"sources":["components/Footer/index.js","components/Wrapper/index.js","components/Header/index.js","components/MinionPhoto/index.js","App.js","serviceWorker.js","index.js"],"names":["AppFooter","className","Wrapper","props","children","Header","MinionPhoto","alt","name","src","image","App","state","minions","chosenMinion","id","mionions","filter","minion","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0oCAmBeA,MAbf,WAEI,OACI,oCACA,kBAAC,IAAD,CAAQC,UAAU,WAGnB,kBAAC,IAAD,CAAKA,UAAU,aAAf,2B,MCHQC,MANf,SAAiBC,GACb,OAAO,wCAAMF,UAAU,WAAcE,GACpCA,EAAMC,W,MCMIC,MAPf,WAEI,OACI,yBAAKJ,UAAU,iB,sBCGRK,MARf,SAAqBH,GACjB,OAEI,yBAAKF,UAAU,gBAAgBM,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,S,gBCsDpDC,E,2MApCdC,MAAQ,CACNC,W,EAGFC,aAAe,SAAAC,GACb,IAAMF,EAAU,EAAKD,MAAMI,SAASC,QAAO,SAAAC,GAAM,OAAIA,EAAOH,KAAOA,KACnE,EAAKH,MAAM,CAAEC,a,wEAGJ,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKZ,UAAU,OAEf,kBAAC,IAAD,CAAKA,UAAU,MAChBkB,KAAKP,MAAMC,QAAQO,KAAI,SAAAF,GAAM,OAC5B,kBAAC,EAAD,CACAJ,aAAgB,EAAKA,aACrBC,GAAIG,EAAOH,GACXM,IAAKH,EAAOH,GACZL,MAAOQ,EAAOR,cAMlB,kBAAC,EAAD,W,GA9BUY,aCXEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7ce209c0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport Footer from \"react-materialize/lib/Footer\";\nimport Row from \"react-materialize/lib/Row\";\n\n\nfunction AppFooter() {\n    \n    return (\n        < >\n        <Footer className=\"footer\">\n    \n       </Footer>\n       <Row className=\"copyright\">Despicable Who? 2019 </Row>\n\n       </>\n    );\n}\n\nexport default AppFooter; ","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Wrapper(props) {\n    return <main className=\"wrapper\" {...props} > \n    {props.children}\n    </main>\n}\n\nexport default Wrapper; ","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Header() {\n    \n    return (\n        <div className=\"headerImage\"/>\n    )\n}\n\nexport default Header; ","import React from \"react\";\nimport \"./style.css\";\n\nfunction MinionPhoto(props) {\n    return (\n    \n        <img className=\"minionProfile\" alt={props.name} src={props.image} />\n    \n    )\n}\n\nexport default MinionPhoto; "," // Import React \n// =========================================================\nimport React, {Component } from 'react';\n\n // Components\n// =========================================================\nimport AppFooter from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Row from \"react-materialize/lib/Row\";\nimport Col from \"react-materialize/lib/Col\"\nimport MinionPhoto from \"./components/MinionPhoto\"\n\n // CSS\n// =========================================================\nimport './App.css';\n\n // Import JSON\n// =========================================================\nimport minions from \"./minions.json\"\n\n // Set state & Exportt App \n// =========================================================\nclass App extends Component {\n state = {\n   minions\n }; \n\n chosenMinion = id => {\n   const minions = this.state.mionions.filter(minion => minion.id !== id);\n   this.state({ minions })\n }\n\n  render() {\n    return (\n      < >\n        <Wrapper> \n          <Header/>\n          <Row>\n            <Col className=\"s4\">\n            </Col>\n            <Col className=\"s8\">\n          {this.state.minions.map(minion => (\n            <MinionPhoto \n            chosenMinion = {this.chosenMinion}\n            id={minion.id}\n            key={minion.id}\n            image={minion.image}\n            />\n          ))}\n          </Col>\n          </Row>\n        </Wrapper>\n        <AppFooter/>\n      </>\n      \n    );\n  }\n}\n\nexport default App;\n\n// import Button from 'react-materialize/lib/Button';\n// import Modal from 'react-materialize/lib/Modal';\n // const trigger = <Button>Open Modal</Button>;\n//  <Modal header=\"Modal Header\" trigger={trigger}>\n//  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n// </Modal>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}