{"version":3,"sources":["components/Footer/index.js","components/Wrapper/index.js","components/Header/index.js","components/LeftSide/index.js","components/MinionPhoto/index.js","App.js","serviceWorker.js","index.js"],"names":["AppFooter","className","Wrapper","props","children","Header","LeftSide","style","backgroundColor","width","height","marginTop","borderRadius","paddingRight","MinionPhoto","alt","name","src","image","id","onClick","handleBtnClick","App","event","minionID","target","state","guessed","push","console","log","shuffleMinions","minionsArray","minions","i","length","randomNum","Math","floor","random","setState","message","highScore","score","this","map","minion","key","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"41CAmBeA,MAbf,WAEI,OACI,oCACA,kBAAC,IAAD,CAAQC,UAAU,WAGnB,kBAAC,IAAD,CAAKA,UAAU,0BAAf,2B,MCHQC,MANf,SAAiBC,GACb,OAAO,wCAAMF,UAAU,WAAcE,GACpCA,EAAMC,W,MCIIC,MAPf,WAEI,OACI,yBAAKJ,UAAU,iB,sBCmCRK,MApCf,SAAkBH,GAWlB,OACI,oCACA,kBAAC,IAAD,CAAKI,MAZa,CACdC,gBAAiB,UACjBC,MAAO,OACPC,OAAQ,QACRC,UAAW,MACXC,aAAc,OACdC,aAAc,QAOlB,kBAAC,IAAD,CAAKZ,UAAU,oBAIf,kBAAC,IAAD,CAAKA,UAAU,sBACX,kBAAC,IAAD,KACG,2DAEA,wEAEC,oE,MCZGa,MAdf,SAAqBX,GACjB,OAEI,yBACIF,UAAS,+BACTc,IAAKZ,EAAMa,KACXC,IAAKd,EAAMe,MACXC,GAAIhB,EAAMgB,GACVC,QAASjB,EAAMkB,kB,gBCmFZC,E,YArEb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAeTkB,eAAiB,SAAAE,GACf,IAAIC,EAAWD,EAAME,OAAON,GAE5B,EAAKO,MAAMC,QAAQC,KAAKJ,GACzBK,QAAQC,IAAK,EAAKJ,MAAMC,SACvB,EAAKI,kBArBa,EAyBnBA,eAAiB,WAGf,IAFA,IAAIC,EAAe,EAAKN,MAAMO,QAEtBC,EAAIF,EAAaG,OAAS,EAAGD,EAAI,EAAGA,IAAI,CAC9C,IAAIE,EAAYC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADF,EAEA,CAACF,EAAaI,GAAYJ,EAAaE,IAApFF,EAAaE,GAFgC,KAE5BF,EAAaI,GAFe,KAI/C,EAAKI,SAAS,CACZP,QAASD,KA/BZ,EAAKN,MAAQ,CACXO,QAASA,EACTQ,QAAS,2BACTd,QAAS,GACTe,UAAW,EACXC,MAAO,GAPQ,E,kFAajBC,KAAKb,mB,+BAwBG,IAAD,OAEP,OAEE,8BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK9B,UAAU,MACf,kBAAC,EAAD,OAEA,kBAAC,IAAD,CAAKA,UAAU,KAAKM,MAAO,CAAEI,UAAW,SAEvCiC,KAAKlB,MAAMO,QAAQY,KAAI,SAACC,EAAQZ,GAAT,OACxB,kBAAC,EAAD,CACAa,IAAKb,EACLf,GAAI2B,EAAO3B,GACXD,MAAO4B,EAAO5B,MACdS,QAASmB,EAAOnB,QAChBN,eAAiB,EAAKA,eAAe2B,KAAK,WAM9C,kBAAC,EAAD,W,GA/DUC,aCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1377d5e8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport Footer from \"react-materialize/lib/Footer\";\nimport Row from \"react-materialize/lib/Row\";\n\n\nfunction AppFooter() {\n    \n    return (\n        < >\n        <Footer className=\"footer\">\n    \n       </Footer>\n       <Row className=\"copyright center-align\">Despicable Who? 2019 </Row>\n\n       </>\n    );\n}\n\nexport default AppFooter; ","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Wrapper(props) {\n    return <main className=\"wrapper\" {...props} > \n    {props.children}\n    </main>\n}\n\nexport default Wrapper; ","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n    \n    return (\n        <div className=\"headerImage\"/>\n    )\n}\n\nexport default Header; ","import React from \"react\";\nimport Col from \"react-materialize/lib/Col\";\nimport Row from \"react-materialize/lib/Row\"\nimport \"./style.css\"\n\nfunction LeftSide(props) {\n    const leftSide =  {\n        backgroundColor: \"#D78618\",\n        width: \"100%\",\n        height: \"500px\",\n        marginTop: \"5px\",\n        borderRadius: \"10px\",\n        paddingRight: \"0px\", \n      }\n      \n\nreturn (\n    <>\n    <Row style={ leftSide }>\n    <Col className=\"s5 l5 leftImage\"> \n    \n    </Col>\n   \n    <Col className=\"s5 l6 center-align\"> \n        <Row>\n           <h6>Who is my partner in crime?</h6>\n\n           <h6>Click the correct minion to earn points.</h6> \n\n            <p>Donâ€™t click more than once!</p>\n        </Row>\n        {/* <Row className=\"rightSide\">\n            <h5>High Score: {props.highScore}</h5>\n        </Row> */}\n    </Col>\n\n    </Row>\n    </>\n)\n}\n\nexport default LeftSide; ","import React from \"react\";\nimport \"./style.css\";\n\nfunction MinionPhoto(props) {\n    return (\n    \n        <img \n            className={`minionProfile responsive-img`}\n            alt={props.name} \n            src={props.image}\n            id={props.id}\n            onClick={props.handleBtnClick}\n        />\n    \n    )\n}\n\nexport default MinionPhoto; "," // Import React \n// =========================================================\nimport React, {Component } from 'react';\n\n // Components\n// =========================================================\nimport AppFooter from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport LeftSide from \"./components/LeftSide\";\nimport Row from \"react-materialize/lib/Row\";\nimport Col from \"react-materialize/lib/Col\"\nimport MinionPhoto from \"./components/MinionPhoto\"\n\n // CSS\n// =========================================================\nimport './App.css';\n\n // Import JSON\n// =========================================================\nimport minions from \"./minions.json\"\n\n // Set state & Exportt App \n// =========================================================\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minions: minions,\n      message: \"Select a minion to begin\",\n      guessed: [], \n      highScore: 0, \n      score: 0\n    };\n }; \n\n   // Shuffle the minions before the component mounts\n   componentWillMount() {\n    this.shuffleMinions();\n  }\n\n handleBtnClick = event => {\n   let minionID = event.target.id\n  \n   this.state.guessed.push(minionID); \n  console.log( this.state.guessed)\n   this.shuffleMinions();\n\n}\n  // Shuffle minions on click \n  shuffleMinions = () => {\n    let minionsArray = this.state.minions; \n    \n    for(let i = minionsArray.length - 1; i > 0; i--){\n      let randomNum = Math.floor(Math.random() * (i + 1));\n      [minionsArray[i], minionsArray[randomNum]] =  [minionsArray[randomNum], minionsArray[i]]\n    }\n     this.setState({\n       minions: minionsArray\n     })\n  }\n\n  render() {\n   \n    return (\n      \n      <main>\n        <Wrapper> \n          <Header/>\n          <Row>\n            <Col className=\"s5\">\n            <LeftSide/>\n            </Col>\n            <Col className=\"s7\" style={{ marginTop: \"19px\"}}>\n  \n            {this.state.minions.map((minion, i) => (\n            <MinionPhoto \n            key={i}\n            id={minion.id}\n            image={minion.image}\n            guessed={minion.guessed}\n            handleBtnClick= {this.handleBtnClick.bind(this)}\n            />\n          ))}\n          </Col>\n          </Row>\n        </Wrapper>\n        <AppFooter/>\n      </main>\n      \n    );\n  }\n}\n\nexport default App;\n\n// import Button from 'react-materialize/lib/Button';\n// import Modal from 'react-materialize/lib/Modal';\n // const trigger = <Button>Open Modal</Button>;\n//  <Modal header=\"Modal Header\" trigger={trigger}>\n//  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n// </Modal>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}