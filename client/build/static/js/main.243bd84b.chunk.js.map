{"version":3,"sources":["components/Gru/gru_t.png","components/Footer/index.js","components/Wrapper/index.js","components/Header/index.js","components/Gru/index.js","components/LRWrapper/index.js","components/LeftContainer/index.js","components/RightContainer/index.js","components/MinionPhoto/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppFooter","className","Wrapper","props","children","Header","Gru","alt","src","gru","style","maxWidth","width","marginTop","LRWrapper","display","flexFlow","justifyContent","height","padding","LeftContainer","backgroundColor","borderRadius","paddingRight","flex","RightContainer","MinionPhoto","name","image","id","onClick","handleBtnClick","App","event","minionID","target","guessedArray","state","guessed","length","mArray","minions","includes","gameOver","wonGame","push","correctGuess","shuffleMinions","minionsArray","i","randomNum","Math","floor","random","setState","alert","score","highScore","status","this","map","minion","key","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.243bd84b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gru_t.62be63d7.png\";","import React from \"react\";\nimport \"./style.css\";\nimport Footer from \"react-materialize/lib/Footer\";\nimport Row from \"react-materialize/lib/Row\";\n\n\nfunction AppFooter() {\n    \n    return (\n        < >\n        <Footer className=\"footer\">\n    \n       </Footer>\n       <Row className=\"copyright center-align\">Despicable Who? 2019 </Row>\n\n       </>\n    );\n}\n\nexport default AppFooter; ","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Wrapper(props) {\n    return <main className=\"wrapper\" {...props} > \n    {props.children}\n    </main>\n}\n\nexport default Wrapper; ","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n    \n    return (\n        <div className=\"headerImage\"/>\n    )\n}\n\nexport default Header; ","import React from \"react\";\nimport gru from \"./gru_t.png\";\n\n\nfunction Gru() {\n   const gruStyle = {\n      maxWidth: \"200px\",\n      width: \"100%\", \n      marginTop: \"40px\"\n    }\n      \n    return (\n\n    <img alt=\"gru\" \n        src={ gru }\n        style= {gruStyle} />\n    )\n}\n\nexport default Gru; ","import React from \"react\";\n\n\nfunction LRWrapper(props) {\n  const lr = {\n    display: \"flex\", \n    flexFlow: \"row wrap\", \n    justifyContent: \"space-around\", \n    height: \"500px\", \n    padding: \"0 60px\"\n  }\n\n  return (\n    <div style= { lr } {...props}> \n      {props.children}\n      </div>\n  )\n}\n\n\nexport default LRWrapper; ","import React from \"react\";\n\n\nfunction LeftContainer(props) {\n  const Left = {\n    backgroundColor: \"#D78618\",\n    width: \"100%\",\n    height: \"500px\",\n    marginTop: \"5px\",\n    borderRadius: \"10px\",\n    paddingRight: \"0px\", \n    flex: \"2 1 0 \"\n  }\n\n  return (\n    <div style= { Left } {...props}> \n      {props.children}\n      </div>\n  )\n}\n\n\nexport default LeftContainer; ","import React from \"react\";\n\n\nfunction RightContainer(props) {\n  const Right = {\n    marginTop: \"17px\", \n    flex: \"3 1 0 \"\n  }\n\n  return (\n    <div style= { Right } {...props}> \n      {props.children}\n      </div>\n  )\n}\n\n\nexport default RightContainer; ","import React from \"react\";\nimport \"./style.css\";\n\nfunction MinionPhoto(props) {\n    return (\n    \n        <img \n            className={`minionProfile responsive-img right-align`}\n            alt={props.name} \n            src={props.image}\n            id={props.id}\n            onClick={props.handleBtnClick}\n        />\n    \n    )\n}\n\nexport default MinionPhoto; "," // Import React \n// =========================================================\nimport React, {Component } from 'react';\n\n // Components\n// =========================================================\nimport AppFooter from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Gru from \"./components/Gru\";\nimport LRWrapper from './components/LRWrapper'\nimport LeftContainer from './components/LeftContainer';\nimport RightContainer from './components/RightContainer';\nimport Row from \"react-materialize/lib/Row\";\nimport Col from \"react-materialize/lib/Col\"\nimport MinionPhoto from \"./components/MinionPhoto\"\n\n\n // CSS\n// =========================================================\nimport './App.css';\n\n // Import JSON\n// =========================================================\nimport minions from \"./minions.json\"\n\n\n // Set state & Exportt App \n// =========================================================\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      minions: minions,\n      status: \"Select a minion to begin! Good Luck!\",\n      guessed: [], \n      highScore: 0, \n      score: 0\n    };\n }; \n\n   // Shuffle the minions before the component mounts\n   componentWillMount() {\n    this.shuffleMinions();\n  }\n\n handleBtnClick = event => {\n  // Grab the id of the minion clicked\n  let minionID = event.target.id\n  let guessedArray = this.state.guessed.length\n  let mArray = this.state.minions.length\n\n  if (this.state.guessed.includes(minionID) && guessedArray !== mArray){\n    this.gameOver();     \n  } \n  else if (!this.state.guessed.includes(minionID)) {\n      // Push the minion that was guessed to the guessed array \n      this.state.guessed.push(minionID); \n      // console.log( this.state.guessed)\n      this.correctGuess();\n  } else {\n    this.wonGame();\n  }\n  this.shuffleMinions();\n\n}\n  // Shuffle minions on click \n  shuffleMinions = () => {\n    let minionsArray = this.state.minions; \n    \n    for(let i = minionsArray.length - 1; i > 0; i--){\n      let randomNum = Math.floor(Math.random() * (i + 1));\n      [minionsArray[i], minionsArray[randomNum]] =  [minionsArray[randomNum], minionsArray[i]]\n    }\n     this.setState({\n       minions: minionsArray\n     })\n  }\n  // Guessed wrong image\n  gameOver = () => {\n    alert(\"GAME OVER!\")\n  }\n  // Guessed an image correctly \n  correctGuess = () => {\n  // Update score  \n  let score = this.state.score + 2; \n  let highScore = score > this.state.highScore ? score : this.state.score;\n    this.setState({\n      highScore, \n      score,\n      status: \"Correct! \"\n    })\n  }\n  // Won game \n  wonGame = () => {\n    alert(\"Congradulations, You Won!\")\n  }\n\n\n  render() {\n   \n    return (\n      \n      <main>\n        <Wrapper> \n          <Header/>\n          <LRWrapper>\n              <LeftContainer> \n                <Row>\n                  <Col className=\"s5 l5\"> \n                    <Gru/>\n                  </Col>\n        \n                  <Col className=\"s5 l6 center-align\"> \n                    <Row>\n                      <h6>Welcome to the Despicable Who Memory Game!</h6>\n\n                      <p>Can you rescue all of the minions from Gru?</p> \n                      <p> Click on each minion to earn points.</p> \n                      <p>Donâ€™t click the same minion more than once!</p>\n                      <p>{this.state.status} </p>\n                    </Row>\n\n                    <Row> \n                     <h6> Highscore: {this.state.highScore}</h6>\n                     <h6> Score: {this.state.score}</h6>\n                    </Row> \n                  </Col>\n                  \n\n                </Row>\n              </LeftContainer> \n              <RightContainer className=\"right-align\">\n              \n                {this.state.minions.map((minion, i) => (\n                <MinionPhoto \n                key={i}\n                id={minion.id}\n                image={minion.image}\n                guessed={minion.guessed}\n                handleBtnClick= {this.handleBtnClick.bind(this)}\n                />\n              ))}\n            </RightContainer>\n          </LRWrapper>\n        </Wrapper>\n        <AppFooter/>\n      </main>\n      \n    );\n  }\n}\n\nexport default App;\n\n// import Button from 'react-materialize/lib/Button';\n// import Modal from 'react-materialize/lib/Modal';\n // const trigger = <Button>Open Modal</Button>;\n//  <Modal header=\"Modal Header\" trigger={trigger}>\n//  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n// </Modal>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}